{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nextjs-chat-persistence-database",
  "type": "registry:page",
  "title": "NextJS Chat Bot with Database Persistence",
  "description": "A chat bot implementation with message persistence using database storage. Includes UI component, API endpoint, and database storage utilities with Drizzle ORM. Suitable for production environments with improved performance through caching.",
  "dependencies": [
    "ai",
    "@ai-sdk/react",
    "drizzle-orm"
  ],
  "files": [
    {
      "path": "src/lib/ai/persistence/config.ts",
      "content": "/**\n * Consistant\n */\nexport const CHAT_MESSAGE_CLIENT_PREFIX = \"msgc\";\nexport const CHAT_MESSAGE_SERVER_PREFIX = \"msgs\";\n",
      "type": "registry:lib",
      "target": "./lib/ai/persistence/config.ts"
    },
    {
      "path": "src/lib/ai/persistence/chat-store-database.ts",
      "content": "/**\n * Database chat store\n *\n * We use drizle and build our project with T3 stack.\n * There is a drizzle schema example at the end of this file.\n *\n * It's good to follow the T3 stack who builds incredable\n * scripts to set up your databse at local with Docker Destop\n *\n * Or, you can set up your drizzle orm and connet to database\n * with your own way.\n *\n * Cache loaded data with next/cache, which is built-in functions\n * of Next.js.\n * deprecated cache: It allow us to cache the results of expensive database queries.\n * You can build it yourself by connect a KV store.\n *\n * @see https://orm.drizzle.team/ - Drizzle ORM documentation\n * @see https://create.t3.gg/ - T3 Stack documentation\n * @see https://nextjs.org/docs/app/api-reference/functions/unstable_cache - Next.js cache documentation\n *\n * @author Sawana Huang <<hsawana9@gmail.com>>\n * @date 2025-05-04\n */\n\n// Force this module to be used only on server-side\nimport \"server-only\";\n\nimport { type Message } from \"ai\";\n\nimport { db } from \"@/server/db\";\nimport { chats, messages as messagesSchema } from \"@/server/db/schema\";\nimport type { ChatInsert } from \"@/server/db/types\";\n\n/**\n * Creates a new chat session in the database.\n *\n * This function inserts a new chat record into the database with default values\n * and returns the generated unique identifier for the chat. The function handles\n * authentication internally (placeholder for auth logic).\n *\n * @async\n * @function createChat\n * @returns {Promise<string>} A promise that resolves to the unique ID of the newly created chat\n * @throws {Error} Throws an error if the chat creation fails\n */\nexport async function createChat(): Promise<string> {\n  // Your auth logic here\n  // ...\n\n  // create new chat\n  const insertedChat = await db\n    .insert(chats)\n    .values({} as ChatInsert)\n    .returning({\n      id: chats.id,\n    });\n  const id = insertedChat[0]?.id;\n\n  if (!id) {\n    throw new Error(\"Failed to create chat\");\n  }\n\n  return id;\n}\n\n/**\n * Retrieves a list of all chat IDs from the database.\n *\n * This function queries the database for all chat sessions and returns their IDs.\n * Results are cached using Next.js's unstable_cache to improve performance,\n *\n * @async\n * @function listChats\n * @returns {Promise<string[]>} A promise that resolves to an array of chat IDs\n */\nexport async function listChats(): Promise<string[]> {\n  const chats = await db.query.chats.findMany({\n    orderBy: (chats, { asc }) => [asc(chats.createdAt)],\n  });\n\n  return chats.map((chat) => chat.id);\n}\n\n/**\n * Loads all messages for a specific chat from the database.\n *\n * This function retrieves all messages associated with the provided chat ID,\n * ordered by creation time. Results are cached using Next.js's unstable_cache\n * with a revalidation period of 10 minutes to improve performance for\n * frequently accessed chats.\n *\n * @async\n * @function loadChat\n * @param {string} id - The unique identifier of the chat to load\n * @returns {Promise<Message[]>} A promise that resolves to an array of Message objects\n */\nexport async function loadChat(id: string): Promise<Message[]> {\n  const messages = await db.query.messages.findMany({\n    where: (messages, { eq }) => eq(messages.chatId, id),\n    orderBy: (messages, { asc }) => [asc(messages.createdAt)],\n  });\n\n  return messages.map((message) => ({\n    id: message.id,\n    role: message.role,\n    content: message.content,\n    parts: message.parts,\n    attachments: message.attachments,\n    createdAt: message.createdAt,\n  })) as Message[];\n}\n\n/**\n * Saves new messages to a specific chat in the database.\n *\n * This function compares the provided messages with existing messages in the database\n * and only inserts messages that don't already exist. This prevents duplicate messages\n * and optimizes database operations.\n *\n * @async\n * @function saveChat\n * @param {Object} params - The parameters object\n * @param {string} params.id - The unique identifier of the chat to save messages to\n * @param {Message[]} params.messages - The array of messages to save\n * @returns {Promise<void>} A promise that resolves when the operation is complete\n */\n\nexport async function saveChat({\n  id,\n  messages,\n}: {\n  id: string;\n  messages: Message[];\n}): Promise<void> {\n  // history messages\n  const historyMessages = await loadChat(id);\n\n  // compare messages get diff messages\n  const existingMessageIds = new Set(\n    historyMessages.map((message) => message.id),\n  );\n  const newMessages = messages.filter(\n    (message) => !existingMessageIds.has(message.id),\n  );\n  // write to database\n  await db.insert(messagesSchema).values([\n    ...newMessages.map((message) => ({\n      id: message.id,\n      chatId: id,\n      role: message.role,\n      content: message.content,\n      parts: message.parts,\n      attachments: message.experimental_attachments,\n      createdAt:\n        message.createdAt instanceof Date\n          ? message.createdAt\n          : new Date(message.createdAt ?? Date.now()),\n    })),\n  ]);\n}\n\n/**\n * Drizzle Schema\n */\n\n// export const chats = createTable(\n//   \"chat\",\n//   (d) => ({\n//     id: d.uuid().primaryKey().notNull().defaultRandom(),\n//     title: d.text().notNull().default(\"Untitiled Chat\"),\n//     visibility: d\n//       .varchar({ enum: [\"public\", \"private\"] })\n//       .notNull()\n//       .default(\"private\"),\n//     createdAt: d\n//       .timestamp({ withTimezone: true })\n//       .default(sql`CURRENT_TIMESTAMP`)\n//       .notNull(),\n//     updatedAt: d.timestamp({ withTimezone: true }).$onUpdate(() => new Date()),\n//   }),\n//   (t) => [index(\"chat_created_at_idx\").on(t.createdAt)],\n// );\n\n// export const messages = createTable(\n//   \"message\",\n//   (d) => ({\n//     id: d.varchar({ length: 64 }).primaryKey().notNull(),\n//     chatId: d.uuid().notNull(),\n//     role: d.varchar().notNull(),\n//     content: d.text().notNull(),\n//     parts: d.json().notNull(),\n//     attachments: d.json(),\n//     createdAt: d\n//       .timestamp({ withTimezone: true })\n//       .default(sql`CURRENT_TIMESTAMP`)\n//       .notNull(),\n//   }),\n//   (t) => [\n//     index(\"message_created_at_idx\").on(t.createdAt),\n//     foreignKey({\n//       columns: [t.chatId],\n//       foreignColumns: [chats.id],\n//       name: \"message_chat_id_fk\",\n//     }),\n//   ],\n// );\n",
      "type": "registry:lib",
      "target": "./lib/ai/persistence/chat-store-database.ts"
    },
    {
      "path": "src/components/chat-bot-persistence-database.tsx",
      "content": "/**\n * Chat Component for Database Persistence\n *\n * @see https://ai-sdk.dev/docs/ai-sdk-ui/chatbot-message-persistence\n */\n\n\"use client\";\n\nimport { CHAT_MESSAGE_CLIENT_PREFIX } from \"@/lib/ai/persistence/config\";\nimport { type Message, useChat } from \"@ai-sdk/react\";\nimport { createIdGenerator } from \"ai\";\n\nexport default function ChatBotPersistenceDatabase({\n  id,\n  initialMessages,\n}: { id?: string | undefined; initialMessages?: Message[] } = {}) {\n  const { input, handleInputChange, handleSubmit, messages } = useChat({\n    api: \"/api/v1/chat-persistence-database\",\n    // use the provided chat ID\n    id,\n    // initial messages if provided\n    initialMessages,\n    // send id and createdAt for each message\n    sendExtraMessageFields: true,\n    // id format for client-side messages:\n    generateId: createIdGenerator({\n      prefix: CHAT_MESSAGE_CLIENT_PREFIX,\n      size: 16,\n    }),\n  });\n\n  // simplified rendering code, extend as needed:\n  return (\n    <div>\n      {messages.map((m) => (\n        <div key={m.id}>\n          {m.role === \"user\" ? \"User: \" : \"AI: \"}\n          {m.content}\n        </div>\n      ))}\n\n      <form onSubmit={handleSubmit}>\n        <input\n          value={input}\n          placeholder=\"Type your message here...\"\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/api/v1/chat-persistence-database/route.ts",
      "content": "/**\n * Chat API for Persistence\n *\n * @see https://ai-sdk.dev/docs/ai-sdk-ui/chatbot-message-persistence\n */\n\nimport { saveChat } from \"@/lib/ai/persistence/chat-store-database\";\nimport { CHAT_MESSAGE_SERVER_PREFIX } from \"@/lib/ai/persistence/config\";\nimport { dashscope } from \"@/lib/ai/providers/dashscope\";\nimport {\n  appendResponseMessages,\n  createIdGenerator,\n  streamText,\n  type UIMessage,\n} from \"ai\";\n\nexport interface PostRequestBody {\n  // chat id\n  id: string;\n  messages: UIMessage[];\n}\n\nexport async function POST(req: Request) {\n  const { messages, id } = (await req.json()) as PostRequestBody;\n\n  const result = streamText({\n    model: dashscope(\"qwen-turbo\"),\n    messages,\n    // store messages\n    async onFinish({ response }) {\n      await saveChat({\n        id,\n        messages: appendResponseMessages({\n          // history messages\n          messages,\n          // response messages\n          responseMessages: response.messages,\n        }),\n      });\n    },\n    // id format for server-side messages:\n    experimental_generateMessageId: createIdGenerator({\n      prefix: CHAT_MESSAGE_SERVER_PREFIX,\n      size: 16,\n    }),\n  });\n\n  return result.toDataStreamResponse();\n}\n",
      "type": "registry:page",
      "target": "./app/api/v1/chat-persistence-database/route.ts"
    },
    {
      "path": "src/app/(ai-demo)/chat-persistence-database/page.tsx",
      "content": "import { createChat } from \"@/lib/ai/persistence/chat-store-database\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function ChatPersistencePage() {\n  // create a new chat\n  const id = await createChat();\n  // redirect to chat page\n  redirect(`/chat-persistence-database/${id}`);\n}\n",
      "type": "registry:page",
      "target": "./app/(ai-demo)/chat-persistence-database/page.tsx"
    },
    {
      "path": "src/app/(ai-demo)/chat-persistence-database/[id]/page.tsx",
      "content": "import ChatBotPersistenceDatabase from \"@/components/chat-bot-persistence-database\";\nimport { listChats, loadChat } from \"@/lib/ai/persistence/chat-store-database\";\n\nexport default async function ChatPersistenceIdPage({\n  params,\n}: {\n  params: Promise<{ id: string }>;\n}) {\n  // get the chat ID from the URL\n  const { id } = await params;\n  // load the chat messages\n  const messages = await loadChat(id);\n  // list all chat\n  const chats = await listChats();\n\n  return (\n    <div id=\"ChatPersistenceIdPage\" className=\"max-w-4xl py-20\">\n      <div>\n        <a href=\"/chat-persistence-database\">New Chat</a>\n        <div className=\"chat-list\">\n          {chats && chats.length > 0 ? (\n            chats.map((chatId) => (\n              <div key={chatId} className=\"chat-item\">\n                <a href={`/chat-persistence-database/${chatId}`}>\n                  {`chat: ${chatId}`}\n                  {chatId === id ? \" (current)\" : \" →\"}\n                </a>\n              </div>\n            ))\n          ) : (\n            <div className=\"no-chats\">chat history not found</div>\n          )}\n        </div>\n      </div>\n\n      <h1>Current:</h1>\n      <ChatBotPersistenceDatabase id={id} initialMessages={messages} />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "./app/(ai-demo)/chat-persistence-database/[id]/page.tsx"
    }
  ]
}