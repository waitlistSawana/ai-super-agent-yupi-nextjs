{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nextjs-chat-bot-component-and-api",
  "type": "registry:page",
  "title": "NextJS Chat Bot Component with AI Integration",
  "description": "A comprehensive chat bot implementation with both UI component and API endpoint. Built with Vercel AI SDK for seamless integration with NextJS applications.",
  "dependencies": [
    "ai",
    "@ai-sdk/react"
  ],
  "files": [
    {
      "path": "src/components/chat-bot.tsx",
      "content": "/**\n * comprehensive chatbot component\n *\n * @description: comprehensive chatbot component, following the document of AI SDK\n *\n * @see https://ai-sdk.dev/docs/ai-sdk-ui/chatbot\n *\n * @author Sawana Huang <hsawana9@gmail.com>\n * @date 2025-05-03\n *\n */\n\n\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { useChat } from \"@ai-sdk/react\";\n\ntype ChatBotProps = {\n  className?: string;\n};\n\nexport default function ChatBot({\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & ChatBotProps) {\n  const {\n    messages,\n    input,\n    handleInputChange,\n    handleSubmit,\n    status,\n    stop,\n    error,\n    reload,\n  } = useChat({\n    // API endpoint Default /api/chat\n    api: \"/api/v1/chat-bot\",\n    // Throttle the messages and data updates to 50ms:\n    experimental_throttle: 50,\n    // Event Callbacks:\n    // https://ai-sdk.dev/docs/ai-sdk-ui/chatbot#event-callbacks\n    onFinish: (message, { usage, finishReason }) => {\n      console.log(\"Finished streaming message:\", message);\n      console.log(\"Token usage:\", usage);\n      console.log(\"Finish reason:\", finishReason);\n    },\n    onError: (error) => {\n      console.error(\"An error occurred:\", error);\n    },\n    onResponse: (response) => {\n      console.log(\"Received HTTP response from server:\", response);\n      // You can throw error here to trigger the onError callback\n    },\n    // Custom headers, body, and credentials\n    headers: {\n      Authorization: \"Bear your_token\",\n    },\n    body: {\n      key_use_chatbot: \"key of useChatbot\",\n    },\n    credentials: \"same-origin\",\n  });\n\n  return (\n    <div className={cn(\"\", className)} {...props}>\n      <h2>--- Basic Messages ---</h2>\n      {messages.map((message) => (\n        <div key={message.id}>\n          {message.role === \"user\" ? \"User: \" : \"AI: \"}\n          {message.content}\n        </div>\n      ))}\n\n      <h2>--- Messages with Reasoning ---</h2>\n      {messages.map((message) => (\n        <div key={message.id}>\n          {message.role === \"user\" ? \"User: \" : \"AI: \"}\n          {message.parts.map((part, index) => {\n            // text parts:\n            if (part.type === \"text\") {\n              return <div key={index}>{part.text}</div>;\n            }\n            // reasoning parts:\n            if (part.type === \"reasoning\") {\n              return (\n                <pre key={index}>\n                  {part.details.map((detail) =>\n                    detail.type === \"text\" ? detail.text : \"<redacted>\",\n                  )}\n                </pre>\n              );\n            }\n          })}\n        </div>\n      ))}\n\n      <h2>--- Messages with Sources ---</h2>\n      {messages.map((message) => (\n        <div key={message.id}>\n          {message.role === \"user\" ? \"User: \" : \"AI: \"}\n          {message.parts\n            .filter((part) => part.type !== \"source\")\n            .map((part, index) => {\n              if (part.type === \"text\") {\n                return <div key={index}>{part.text}</div>;\n              }\n            })}\n          {message.parts\n            .filter((part) => part.type === \"source\")\n            .map((part) => (\n              <span key={`source-${part.source.id}`}>\n                [\n                <a href={part.source.url} target=\"_blank\">\n                  {part.source.title ?? new URL(part.source.url).hostname}\n                </a>\n                ]\n              </span>\n            ))}\n        </div>\n      ))}\n\n      {(status === \"submitted\" || status === \"streaming\") && (\n        <div>\n          {status === \"submitted\" && \"loading... \"}\n          <button type=\"button\" onClick={() => stop()}>\n            Stop\n          </button>\n        </div>\n      )}\n\n      <h2>--- Erorr ---</h2>\n      {error && (\n        <div>\n          <div>An error occurred.</div>\n          <button type=\"button\" onClick={() => reload()}>\n            Retry\n          </button>\n        </div>\n      )}\n\n      <h2>--- Submit input and Button ---</h2>\n      <form\n        onSubmit={(event) => {\n          handleSubmit(event, {\n            // Custom body fieds per request\n            body: {\n              key_handle_submit: \"key of handleSubmit\",\n            },\n          });\n        }}\n      >\n        <input\n          name=\"prompt\"\n          value={input}\n          placeholder=\"Type your message here...\"\n          onChange={handleInputChange}\n          disabled={status !== \"ready\" || error != null}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/api/v1/chat-bot/route.ts",
      "content": "/**\n * server route for comprehensive chatbot component\n *\n * @description: build server route for comprehensive chatbot component, following the document of AI SDK\n *\n * @see https://ai-sdk.dev/docs/ai-sdk-ui/chatbot\n *\n * @author Sawana Huang <hsawana9@gmail.com>\n * @date 2025-05-03\n *\n */\n\nimport { dashscope } from \"@/lib/ai/providers/dashscope\";\nimport { streamText, type UIMessage } from \"ai\";\nimport { type NextRequest } from \"next/server\";\n\n// Allow streaming responses up to 30 seconds\nexport const maxDuration = 30;\n\nexport interface PostRequestBody {\n  messages: UIMessage[];\n}\nexport interface PostSuccessResponse {\n  message: string;\n}\n\nexport async function POST(request: NextRequest) {\n  const {\n    messages,\n    // custom fields\n    key_use_chatbot,\n    key_handle_submit,\n  } = (await request.json()) as PostRequestBody & {\n    // custom fields\n    key_use_chatbot: string;\n    key_handle_submit: string;\n  };\n\n  // custom fields\n  console.log({ key_use_chatbot, key_handle_submit });\n\n  const result = streamText({\n    // You can use any model you want.\n    // see: https://ai-sdk.dev/providers/ai-sdk-providers\n    model: dashscope(\"deepseek-v3\"),\n    system: \"You are a helpful assistant.\",\n    messages,\n  });\n\n  return result.toDataStreamResponse({\n    // Error Message:\n    // The default error message is masked \"An error occurred.\"\n    // You can forward error messages or send custome messages.\n    getErrorMessage: (error) => {\n      if (error == null) {\n        return \"unknown error\";\n      }\n      if (typeof error === \"string\") {\n        return error;\n      }\n      if (error instanceof Error) {\n        return error.message;\n      }\n      return JSON.stringify(error);\n    },\n    // Usage Information\n    sendUsage: true,\n    // Reasoning:\n    // https://ai-sdk.dev/docs/ai-sdk-ui/chatbot#reasoning\n    sendReasoning: true,\n    // Source\n    // https://ai-sdk.dev/docs/ai-sdk-ui/chatbot#sources\n    // some providers response include sources\n    // eg. Perplexity, Google generative AI\n    sendSources: true,\n  });\n}\n",
      "type": "registry:page",
      "target": "./app/api/v1/chat-bot/route.ts"
    }
  ]
}