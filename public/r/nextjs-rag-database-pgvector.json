{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nextjs-rag-database-pgvector",
  "type": "registry:page",
  "title": "NextJS RAG Chatbot with pgvector Database",
  "description": "A Retrieval-Augmented Generation (RAG) chatbot implementation using pgvector and PostgreSQL for vector similarity search. Includes UI component, API endpoint, and database utilities for embedding storage and retrieval.",
  "dependencies": [
    "ai",
    "@ai-sdk/react",
    "drizzle-orm",
    "zod"
  ],
  "files": [
    {
      "path": "src/lib/ai/embedding/rag-database.ts",
      "content": "/**\n * Rag\n *\n * @see https://ai-sdk.dev/docs/guides/rag-chatbot - RAG Chatbot Guide from AI SDK\n */\n\nimport { embed, embedMany } from \"ai\";\nimport { dashscope } from \"../providers/dashscope\";\nimport { db } from \"@/server/db\";\nimport { cosineDistance, gt, desc, sql } from \"drizzle-orm\";\nimport { embeddings } from \"@/server/db/schema\";\n\n/**\n * Generate chunks from input\n *\n * This function will take an input string and split it by periods, filtering out any empty items.\n */\nconst generateChunks = (input: string): string[] => {\n  return input\n    .trim()\n    .split(\".\")\n    .filter((i) => i !== \"\");\n};\n\nexport const generateEmbeddings = async (\n  value: string,\n): Promise<Array<{ embedding: number[]; content: string }>> => {\n  const chunks = generateChunks(value);\n  // Embed the chunks\n  const { embeddings, values, usage } = await embedMany({\n    model: dashscope.textEmbeddingModel(\"text-embedding-v2\"),\n    values: chunks,\n    maxRetries: 2,\n    // Abort after 15 second\n    abortSignal: AbortSignal.timeout(1000 * 15),\n  });\n\n  return embeddings.map((e, i) => {\n    const c = values[i] ?? chunks[i];\n\n    if (!c) {\n      throw new Error(\"Error: value of embedding is empty, please try again.\");\n    }\n\n    return {\n      content: c,\n      embedding: e,\n    };\n  });\n};\n\n/**\n * generate a single embedding from an input string\n */\nexport const generateEmbedding = async (value: string): Promise<number[]> => {\n  const input = value.replaceAll(\"\\\\n\", \" \");\n  const { embedding } = await embed({\n    model: dashscope.textEmbeddingModel(\"text-embedding-v2\"),\n    value: input,\n  });\n  return embedding;\n};\n\n/**\n * embeds the userâ€™s query, searches the database for similar items, then returns relevant items\n */\nexport const findRelevantContent = async (userQuery: string) => {\n  const userQueryEmbedding = await generateEmbedding(userQuery);\n  console.log({ userQueryEmbedding_source: userQuery });\n  // calculate the similarity between the user's query and the embeddings\n  // Convert cosine distance to similarity score: 1 minus cosine distance gives a value where higher means more similar (range typically -1 to 1)\n  const similarity = sql<number>`1 - (${cosineDistance(\n    embeddings.embedding,\n    userQueryEmbedding,\n  )})`;\n  // find similar items with database query\n  const similarGuides = await db\n    .select({ content: embeddings.content, similarity: similarity })\n    .from(embeddings)\n    .where(gt(similarity, 0.5))\n    .orderBy((t) => desc(t.similarity))\n    .limit(4);\n  console.log({ similarGuides });\n  // if not similar items found, return\n  if (similarGuides.length === 0) {\n    return [\n      {\n        content:\n          \"No relevant content found. Politely inform the user that you are unable to answer the question. (with user's language)\",\n        similarity: 0,\n      },\n    ];\n  }\n  // return items\n  return similarGuides;\n};\n\n/**\n * Drizzle Schema Example\n */\n// export const resources = createTable(\n//   \"resource\",\n//   (d) => ({\n//     id: d.uuid().primaryKey().notNull().defaultRandom(),\n//     content: d.text().notNull(),\n//     createdAt: d\n//       .timestamp({ withTimezone: true })\n//       .default(sql`CURRENT_TIMESTAMP`)\n//       .notNull(),\n//     updatedAt: d.timestamp({ withTimezone: true }).$onUpdate(() => new Date()),\n//   }),\n//   (t) => [index(\"resource_created_at_idx\").on(t.createdAt)],\n// );\n\n// export const embeddings = createTable(\n//   \"embedding\",\n//   (d) => ({\n//     id: d.uuid().primaryKey().notNull().defaultRandom(),\n//     resourceId: d\n//       .uuid()\n//       .references(() => resources.id, { onDelete: \"cascade\" }),\n//     content: d.text().notNull(),\n//     // pgVector plugin must be installed to use vector type\n//     // Guide: https://orm.drizzle.team/docs/guides/vector-similarity-search or https://github.com/pgvector/pgvector\n//     // It works for me with Postgres Container which is built with\n//     // scripts of ./start-database.sh, runing at powershell on Windows 11:\n//     // 1. open container terminal, or open by local terminal: `docker exec -it [DB_CONTAINER_NAME] bash`\n//     // 2. install postgre and tools: `apt-get update && apt-get install -y postgresql-17-pgvector && apt-get install postgresql-server-dev-17 && apt-get install -y git && apt-get install -y build-essential && apt-get install -y make`\n//     // 3. install pgvector: `git clone https://github.com/pgvector/pgvector.git && cd pgvector && make && make install`\n//     // 4. open drizzle-studio: `pnpm db:studio`\n//     // 5. open SQL console, and run following scripts:\n//     // - install pgvector extension: `CREATE EXTENSION IF NOT EXISTS vector;`\n//     // - check pgvector: `SELECT * FROM pg_extension WHERE extname = 'vector';`\n//     embedding: d.vector({ dimensions: 1536 }).notNull(),\n//   }),\n//   (t) => [\n//     // index using hnsw, for faster similarity search\n//     // https://github.com/pgvector/pgvector?tab=readme-ov-file#hnsw\n//     index(\"embedding_idx\").using(\"hnsw\", t.embedding.op(\"vector_cosine_ops\")),\n//     foreignKey({\n//       columns: [t.resourceId],\n//       foreignColumns: [resources.id],\n//       name: \"embedding_resource_id_fk\",\n//     }).onDelete(\"cascade\"),\n//   ],\n// );\n",
      "type": "registry:lib",
      "target": "./lib/ai/embedding/rag-database.ts"
    },
    {
      "path": "src/actions/rag-database.ts",
      "content": "/**\n * Rag Database\n *\n * @see https://ai-sdk.dev/docs/guides/rag-chatbot#update-server-action -- update server action\n */\n\n\"use server\";\n\nimport { generateEmbeddings } from \"@/lib/ai/embedding/rag-database\";\nimport { db } from \"@/server/db\";\nimport { embeddings as embeddingsTable, resources } from \"@/server/db/schema\";\nimport { ResourceInsertSchema, type ResourceInsert } from \"@/server/db/types\";\n\nexport const createResource = async (input: ResourceInsert) => {\n  try {\n    const { content } = ResourceInsertSchema.parse(input);\n\n    const [resource] = await db\n      .insert(resources)\n      .values({ content })\n      .returning();\n\n    if (!resource) throw new Error(\"Error, please try again.\");\n\n    const embeddings = await generateEmbeddings(content);\n    await db.insert(embeddingsTable).values(\n      embeddings.map((embedding) => ({\n        resourceId: resource.id,\n        embedding: embedding.embedding,\n        content: embedding.content,\n      })),\n    );\n\n    return \"Resource successfully created and embedded.\";\n  } catch (e) {\n    if (e instanceof Error)\n      return e.message.length > 0 ? e.message : \"Error, please try again.\";\n  }\n};\n",
      "type": "registry:lib",
      "target": "./actions/rag-database.ts"
    },
    {
      "path": "src/components/rag-database.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useChat } from \"@ai-sdk/react\";\n\ninterface RAGDatabaseProps {\n  className?: string;\n}\n\nexport default function RAGDatabase({\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & RAGDatabaseProps) {\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\n    api: \"/api/v1/rag-database\",\n    maxSteps: 5,\n    onFinish: (messages) => {\n      console.log({\n        createdAt: messages.createdAt,\n        parts: messages.parts,\n      });\n    },\n  });\n\n  return (\n    <div\n      className={cn(\n        \"stretch mx-auto flex w-full max-w-md flex-col py-24\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"space-y-4\">\n        {messages.map((m) => (\n          <div key={m.id} className=\"whitespace-pre-wrap\">\n            <div>\n              <div className=\"font-bold\">{m.role}</div>\n              <p>\n                {m.content.length > 0 ? (\n                  m.content\n                ) : (\n                  <span className=\"font-light italic\">\n                    {[\n                      \"calling tool: \",\n                      m?.parts.map((p) => p.type).join(\", \"),\n                      m.parts.map((p) => {\n                        return p.type === \"tool-invocation\"\n                          ? p.toolInvocation.toolName\n                          : \"\";\n                      }),\n                    ].join(\"\")}\n                  </span>\n                )}\n              </p>\n              <pre className=\"text-xs\">{JSON.stringify(m.parts, null, 2)}</pre>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"fixed bottom-0 mb-8 w-full max-w-md rounded border border-gray-300 p-2 shadow-xl\"\n          value={input}\n          placeholder=\"Say something...\"\n          onChange={handleInputChange}\n        />\n      </form>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/api/v1/rag-database/route.ts",
      "content": "import { createResource } from \"@/actions/rag-database\";\nimport { findRelevantContent } from \"@/lib/ai/embedding/rag-database\";\nimport { dashscope } from \"@/lib/ai/providers/dashscope\";\nimport { streamText, tool, type UIMessage } from \"ai\";\nimport { z } from \"zod\";\n\n// Allow streaming responses up to 30 seconds\nexport const maxDuration = 30;\n\nexport interface PostRequestBody {\n  messages: UIMessage[];\n}\n\nexport async function POST(req: Request) {\n  const { messages } = (await req.json()) as PostRequestBody;\n\n  const result = streamText({\n    model: dashscope(\"qwen-plus\"),\n    system: `You are a helpful assistant. Check your knowledge base before answering any questions.\n    Only respond to questions using information from tool calls.`,\n    messages,\n    tools: {\n      addResource: tool({\n        description: `add a resource to your knowledge base.\n          If the user provides a random piece of knowledge unprompted, use this tool without asking for confirmation.`,\n        parameters: z.object({\n          content: z\n            .string()\n            .describe(\"the content or resource to add to the knowledge base\"),\n        }),\n        execute: async ({ content }) => createResource({ content }),\n      }),\n      getInformation: tool({\n        description: `get information from knowledge base to answer the latest question from user.`,\n        parameters: z.object({\n          question: z.string().describe(\"the users question\"),\n        }),\n        execute: async ({ question }) => findRelevantContent(question),\n      }),\n    },\n  });\n\n  return result.toDataStreamResponse();\n}\n",
      "type": "registry:page",
      "target": "./app/api/v1/rag-database/route.ts"
    },
    {
      "path": "src/app/(ai-demo)/rag-database/page.tsx",
      "content": "import RAGDatabase from \"@/components/rag-database\";\n\nexport default function RAGDatabasePage() {\n  return (\n    <div id=\"RAGDatabasePage\">\n      <RAGDatabase />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "./app/(ai-demo)/rag-database/page.tsx"
    }
  ]
}